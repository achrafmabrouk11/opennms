<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:onmsgi="http://xmlns.opennms.org/xsd/spring/onms-osgi"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
  http://xmlns.opennms.org/xsd/spring/onms-osgi http://xmlns.opennms.org/xsd/spring/onms-osgi.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
">

  <context:annotation-config />
  <tx:annotation-driven/>
  <aop:aspectj-autoproxy proxy-target-class="true" />

  <bean id="daemon" class="org.opennms.netmgt.eventd.Eventd">
    <property name="eventdServiceManager" ref="eventdServiceManager"/>
    <property name="receiver" ref="broadcastEventProcessor"/>
  </bean>

  <!--
  <onmsgi:reference id="eventdConfigManager" interface="org.opennms.netmgt.config.api.EventdConfig"/>
  <onmsgi:reference id="eventConfDao" interface="org.opennms.netmgt.config.api.EventConfDao"/>
  <onmsgi:reference id="eventdServiceManager" interface="org.opennms.netmgt.dao.api.EventdServiceManager"/>
  -->

  <bean id="eventExpander" class="org.opennms.netmgt.eventd.EventExpander">
    <constructor-arg ref="eventdMetricRegistry"/>
    <property name="eventConfDao" ref="eventConfDao"/>
    <property name="eventUtil" ref="eventUtil"/>
  </bean>

  <bean id="eventParmRegexFilter" class="org.opennms.netmgt.eventd.processor.EventParmRegexFilterProcessor">
    <property name="eventConfDao" ref="eventConfDao"/>
  </bean>

  <bean id="eventIpcManagerImpl" class="org.opennms.netmgt.eventd.EventIpcManagerDefaultImpl">
    <constructor-arg ref="eventdMetricRegistry"/>
    <property name="handlerQueueLength">
      <bean factory-bean="eventdConfigManager" factory-method="getQueueLength"/>
    </property>
    <property name="eventHandler" ref="eventdEventHandler"/>
  </bean>

  <onmsgi:service ref="eventIpcManagerImpl">
    <onmsgi:interfaces>
      <value>org.opennms.netmgt.events.api.EventForwarder</value>
      <value>org.opennms.netmgt.events.api.EventIpcBroadcaster</value>
      <value>org.opennms.netmgt.events.api.EventIpcManager</value>
      <value>org.opennms.netmgt.events.api.EventProxy</value>
      <value>org.opennms.netmgt.events.api.EventSubscriptionService</value>
    </onmsgi:interfaces>
  </onmsgi:service>

  <bean id="eventIpcManagerFactory-setInstance" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" depends-on="eventIpcManagerImpl">
    <property name="staticMethod"><value>org.opennms.netmgt.events.api.EventIpcManagerFactory.setIpcManager</value></property>
    <property name="arguments">
      <list>
        <ref bean="eventIpcManagerImpl"/>
      </list>
    </property>
  </bean>

  <!-- Handle events by submitting them to a Camel endpoint -->
  <bean id="eventdEventHandler" class="org.opennms.netmgt.eventd.DefaultEventHandlerImpl">
    <constructor-arg value="seda:submitEvent"/>
    <constructor-arg ref="eventdMetricRegistry"/>
  </bean>

  <bean id="eventWriter" class="org.opennms.netmgt.eventd.processor.HibernateEventWriter">
    <constructor-arg ref="eventdMetricRegistry"/>
  </bean>

  <bean id="eventIpcBroadcastProcessor" class="org.opennms.netmgt.eventd.processor.EventIpcBroadcastProcessor">
    <constructor-arg ref="eventdMetricRegistry"/>
    <property name="eventIpcBroadcaster" ref="eventIpcManagerImpl"/>
  </bean>

  <bean id="eventHandler" class="org.opennms.netmgt.eventd.adaptors.EventIpcManagerEventHandlerProxy" depends-on="eventIpcManagerImpl">
    <property name="eventIpcManager" ref="eventIpcManagerImpl"/>
  </bean>

  <bean id="queueNameFactory" class="org.opennms.core.camel.JmsQueueNameFactory">
    <constructor-arg value="Eventd"/>
    <constructor-arg value="BroadcastEvent"/>
  </bean>

  <bean id="broadcastEventProcessor" class="org.opennms.netmgt.eventd.BroadcastEventProcessor" depends-on="eventIpcManagerImpl">
    <constructor-arg ref="eventIpcManagerImpl"/>
    <constructor-arg ref="eventConfDao"/>
  </bean>

  <bean id="eventdMetricRegistryJmxReporterBuilder" class="com.codahale.metrics.JmxReporter" factory-method="forRegistry">
      <constructor-arg ref="eventdMetricRegistry"/>
  </bean>

  <bean id="eventdMetricRegistryDomainedJmxReporterBuilder" factory-bean="eventdMetricRegistryJmxReporterBuilder" factory-method="inDomain">
      <constructor-arg value="org.opennms.netmgt.eventd"/>
  </bean>

  <bean id="eventdMetricRegistryJmxReporter"
        factory-bean="eventdMetricRegistryDomainedJmxReporterBuilder"
        factory-method="build"
        init-method="start"
        destroy-method="stop" />

  <!-- Camel processor that receives XML events and sends them to an EventForwarder -->
  <bean id="xmlEventProcessor" class="org.opennms.netmgt.eventd.XmlEventProcessor">
    <property name="eventForwarder" ref="eventIpcManagerImpl"/>
  </bean>

  <!-- Unmarshaller for event Log objects -->
  <!--
  <bean id="unmarshaller" class="org.opennms.core.camel.JaxbUtilsUnmarshalProcessor">
    <constructor-arg value="org.opennms.netmgt.xml.event.Log" />
  </bean>
  -->

  <!-- Create a set of Properties that can be used as propertyPlaceholders for Camel -->
  <bean id="eventdProperties" class="org.opennms.netmgt.eventd.EventdConfigManagerPropertiesConverter" factory-method="getProperties">
    <constructor-arg ref="eventdConfigManager"/>
  </bean>

  <!-- Create a Camel PropertiesComponent -->
  <bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
    <property name="initialProperties" ref="eventdProperties"/>
  </bean>

  <bean id="tcpXmlFrameDecoder" class="io.netty.handler.codec.xml.XmlFrameDecoder">
    <!-- TODO: Provide a way to cap this value so we can't be DDOS'd by huge events -->
    <constructor-arg value="2147483647"/>
  </bean>

  <bean id="udpXmlFrameDecoder" class="io.netty.handler.codec.xml.XmlFrameDecoder">
    <!-- TODO: Provide a way to cap this value so we can't be DDOS'd by huge events -->
    <constructor-arg value="2147483647"/>
  </bean>

  <camelContext id="eventdCamelContext" xmlns="http://camel.apache.org/schema/spring">

    <onException>
      <exception>org.opennms.netmgt.events.api.EventProcessorException</exception>
      <handled>
        <constant>true</constant>
      </handled>
      <log loggingLevel="WARN" message="Unable to process event in route ID ${routeId}; not processing with any later processors"/>
      <log loggingLevel="WARN" message="${exception.stacktrace}"/>
    </onException>

    <onException>
      <exception>java.lang.Throwable</exception>
      <handled>
        <constant>true</constant>
      </handled>
      <log loggingLevel="ERROR" message="Unexpected exception while processing event in route ID ${routeId}; not processing with any later processors"/>
      <log loggingLevel="ERROR" message="${exception.stacktrace}"/>
    </onException>

    <route id="tcpEventReceiver">
        <from uri="netty4:tcp://{{tcpIpAddress}}:{{tcpPort}}?receiveBufferSize=2147483647&amp;sync=true&amp;allowDefaultCodec=false&amp;decoders=#tcpXmlFrameDecoder"/>
        <log message="Receiving OpenNMS event over TCP port {{tcpPort}}"/>
        <process ref="xmlEventProcessor"/>
    </route>

    <route id="udpEventReceiver">
        <from uri="netty4:udp://{{udpIpAddress}}:{{udpPort}}?receiveBufferSize=2147483647&amp;sync=true&amp;allowDefaultCodec=false&amp;decoders=#udpXmlFrameDecoder"/>
        <log message="Receiving OpenNMS event over UDP port {{udpPort}}"/>
        <process ref="xmlEventProcessor"/>
    </route>

    <route id="submitEvent">
      <from uri="seda:submitEvent?size={{eventIpcManagerHandlerQueueLength}}&amp;concurrentConsumers={{eventIpcManagerHandlerPoolSize}}" />

      <to uri="bean:org.opennms.netmgt.events.api.support.EventLogSplitter?method=splitEventLogs"/>

      <split>
        <!-- Split the event Logs -->
        <simple>${body}</simple>

        <choice>
          <when>
            <simple>{{shouldLogEventSummaries}}</simple>
            <!-- TODO: Figure out how to print the parms -->
            <!-- LOG.info("Received event: UEI={}, src={}, iface={}, svc={}, time={}, parms={}", event.getUei(), event.getSource(), event.getInterface(), event.getService(), event.getTime(), getPrettyParms(event)); -->
            <log message="Received event: UEI=${body.events.event[0].uei}, src=${body.events.event[0].source}, iface=${body.events.event[0].interface}, svc=${body.events.event[0].service}, time=${body.events.event[0].time}, parms={}"/>
          </when>
        </choice>

        <!--
          Process the received events. For each event, use the EventExpander to
          look up matching eventconf entry and load info from that match, expand
          event parms, add event to database and send event to appropriate
          listeners.
        -->

        <!-- 
          This EventProcessor can be used to perform regex replacements on incoming parm values.
          It was added in 1.11 and because of performance concerns, it is commented-out for now.
        -->
        <!-- <bean ref="eventParmRegexFilter"/> -->

        <!-- Expand the event parms -->
        <bean ref="eventExpander"/>

        <!-- Write the event into the database -->
        <bean ref="eventWriter"/>

        <!-- Broadcast the event over the messaging channel -->
        <bean ref="eventIpcBroadcastProcessor"/>

        <!--
          Use recipientList so that we can have a dynamic 'to:' URI.
          Make sure that the exchange is using an InOut pattern so 
          that the output is passed to the next endpoint.
        -->
        <!--
        <setExchangePattern pattern="InOut"/>
        <recipientList>
          <simple>queuingservice:${bean:queueNameFactory.getName()}</simple>
        </recipientList>
        -->
      </split>
    </route>
  </camelContext>

</beans>
